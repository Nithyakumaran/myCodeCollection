import java.util.Arrays;
import java.util.Comparator;

class mergeIntervals{
	public static void main(String[] args){
		Integer[][] intervals= {{1,3}, {2,4}, {5,7}, {6,8} };
		printArray(intervals);
		
		Arrays.sort(intervals, new Comparator<Integer[]>() {
            @Override
            public int compare(final Integer[] a, final Integer[] b) {
                return a[0].compareTo(b[0]);
            }
        });
		
		printArray(intervals);
		merge(intervals, 0,0,null);
	}
	//1. Maintain an current Interval array
	//2. If current and next are in range update interval end point and recur
	//3. update interval = next and recur
static void merge(Integer[][] arr, int i,int j, Integer[] interval){
		
		if(i>arr.length-1 || j>arr.length-1) {
			if(interval!=null)System.out.println("{"+interval[0]+","+interval[1]+"}");
			else if(i<=arr.length) System.out.println("{"+arr[i][0]+","+arr[i][1]+"}");
			return;
		}
		if(i==j) {
			merge(arr,i,j+1,interval);
			return;
		}
		if(interval==null) interval= arr[i];
		if(inRange(interval,arr[j]) )	{
			if(arr[j][1]>interval[1])interval[1]=arr[j][1];
			merge(arr,i+i,j+1,interval);
		}
			
		else {
			System.out.println("{"+interval[0]+","+interval[1]+"}");
			merge(arr,j,j+1,null);
		}
		
			
		
	}
	
	
	static boolean inRange(Integer[] a, Integer[] b){
		return b[0]>=a[0] && b[0]<=a[1];
	}
	
	static void printArray(Integer[][] arr){
		System.out.print("{ ");
		for(Integer[] a:arr){
				System.out.print("{ ");
				for(Integer i:a){
						System.out.print(i+",");
				}
				System.out.print("}, ");
		}
		System.out.println("}");
		
	}
}

